// Generated by CoffeeScript 1.6.3
(function() {
  var Euphony,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Euphony = (function() {
    function Euphony() {
      this.setProgress = __bind(this.setProgress, this);
      this.setCurrentTime = __bind(this.setCurrentTime, this);
      this.getEndTime = __bind(this.getEndTime, this);
      this.pause = __bind(this.pause, this);
      this.stop = __bind(this.stop, this);
      this.resume = __bind(this.resume, this);
      this.start = __bind(this.start, this);
      var _this = this;
      this.design = new PianoKeyboardDesign();
      this.keyboard = new PianoKeyboard(this.design);
      this.rain = new NoteRain(this.design);
//      this.particles = new NoteParticles(this.design);
      this.player = MIDI.Player;
      this.player.addListener(function(data) {
        var NOTE_OFF, NOTE_ON, message, note;
        NOTE_OFF = 128;
        //NOTE_OFF = 126;
        NOTE_ON = 144;
        //NOTE_ON = 142;
        note = data.note, message = data.message;
		notemsg = message;
        if (message === NOTE_ON) {
          return _this.keyboard.press(note);
          //_this.keyboard.press(note);
          //return _this.particles.createParticles(note);
        } else if (message === NOTE_OFF) {
          return _this.keyboard.release(note);
        }
      });
      this.player.setAnimation({
        delay: 20,
        callback: function(data) {
          var end, now;
          now = data.now, end = data.end;
          if (typeof _this.onprogress === "function") {
            _this.onprogress({
              current: now,
              total: end
            });
          }
          return _this.rain.update(now * 1000);
        }
      });
    }

    Euphony.prototype.initScene = function() {
      var _this = this;
      this.scene = new Scene('#canvas');
      this.scene.add(this.keyboard.model);
      this.scene.add(this.rain.model);
//      this.scene.add(this.particles.model);
      return this.scene.animate(function() {
        _this.keyboard.update();
//        return _this.particles.update();
      });
    };

    Euphony.prototype.initMidi = function(callback) {
      return MIDI.loadPlugin(function() {
        MIDI.channels[9].mute = true;
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Euphony.prototype.loadBuiltinPlaylist = function(callback) {
      var _this = this;
      /*if (this.playlist) {
        return callback(this.playlist);
      }*/
      return $.getJSON('tttrakz/index2.json', function(playlist) {
        _this.playlist = playlist;
        return callback(_this.playlist);
      });
    };

    Euphony.prototype.loadBuiltinMidi = function(id, callback) {
      var _this = this;
		//console.log(id);		
		// mus = musi[id+1];
      if (!((0 <= id && id < this.playlist.length))) {
		//id = 0;
        return;
      }
      /*if (typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] : void 0) {
        return this.loadMidiFile(localStorage[id], callback);
      }*/
      return $.ajax({
        url: "tttrakz/" + this.playlist[id],
        dataType: 'text',
        //dataType: 'midi',
        success: function(data) { 
		//console.log('T');
          var e;
          _this.loadMidiFile(data, callback);
          try {
            return typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] = data : void 0;
          } catch (_error) {
            e = _error;
            return typeof console !== "undefined" && console !== null ? console.error('localStorage quota limit reached') : void 0;
          }
        }
      });
    };

    Euphony.prototype.loadMidiFile = function(midiFile, callback) {
      var _this = this;
      return this.player.loadFile(midiFile, function() {
        return _this.rain.setMidiData(_this.player.data, callback);
      });
    };

    Euphony.prototype.start = function() {
//	  if (musb) {
	  if (sourceb) {
		this.player.start();
//		mus.play();
		buffAudio.play();
		//console.log('bAplay');
		if (!started){
			//source.start(0.0);
			//buffAudio.play();
			started = true;			
			//console.log('started');
		} else {
			//source.connect(analyser);
			//analyser.connect(audioCtx.destination);		
			started = false;	
		}
		//this.Scene.loadSampleAudio();
		return this.playing = true;
	  }
    };

    Euphony.prototype.resume = function() {
	  pbackT = (this.player.currentTime/1000) + 1e-6;
	  this.player.currentTime += 1e-6;
      this.player.resume();
//	  mus.currentTime += 1e-6;
//	  mus.play();
	  //source.currentTime += 1e-6;
//	  audioCtx.currentTime += 1e-6;
//	  source.currentTime += 1e-6;
	  //source.connect(audioCtx.destination);
	  //source.connect(analyser);
	  //analyser.connect(audioCtx.destination);
	  //buffAudio.seek(currentTime/1000); 
	  buffAudio.play();
	  //source.start(source.currentTime);
	  //console.log(1e-6);
	  //console.log('resume');
	  //console.log(this.player.currentTime);
	  //console.log(mus.currentTime);	  
	  //console.log('resumed');
      return this.playing = true;
    };

    Euphony.prototype.stop = function() {
      this.player.stop();
//	  mus.pause();
//	  mus.currentTime = 0;	  
	  pbackT = 0;
	  if (started){
		//source.disconnect();	  
		buffAudio.stop();
		//source.stop();
		started = false;		
	  }
	  //source.currentTime = 0;	  
	  //audioCtx.currentTime = 0;	  
	  //source.currentTime = 0;	  
	  //console.log('stopped');
      return this.playing = false;
    };

    Euphony.prototype.pause = function() {
      this.player.pause();
//	  mus.pause();	  
	  //source.stop();
	  //source.disconnect();
	  //console.log('paused');
	  buffAudio.pause();
      return this.playing = false;
    };

    Euphony.prototype.getEndTime = function() {
      return this.player.endTime;
    };

    Euphony.prototype.setCurrentTime = function(currentTime) {
      this.player.pause();
      this.player.currentTime = currentTime;
//	  mus.pause();
//	  mus.currentTime = currentTime/1000;
	  //source.stop();
	  //source.disconnect();	  
	  //source.currentTime = currentTime/1000;
//	  audioCtx.currentTime = currentTime/1000;
//	  source.currentTime = currentTime/1000;
	  //audioCtx.playbackTime = currentTime/1000;
	  //buffAudio.stop();
	  pbackT = currentTime/1000;
	  buffAudio.seek(pbackT); 			  
	  //console.log(currentTime);
	  //console.log(this.player.currentTime);
	  //console.log(audioCtx.currentTime);
	  //console.log(mus.currentTime);
      if (this.playing) {
		//console.log('resume');
//		mus.play();
		//source.start(source.currentTime);
		//source.connect(audioCtx.destination);
		//source.connect(analyser);
	    //analyser.connect(audioCtx.destination);
		//buffAudio.play();
		//console.log(pbackT);
//	    buffAudio.seek(pbackT); 		
//		buffAudio.initNewBuffer(buffer2);
		//source.start(currentTime/1000);
        return this.player.resume();
      }
    };

    Euphony.prototype.setProgress = function(progress) {
      var currentTime;
      currentTime = this.player.endTime * progress;
      return this.setCurrentTime(currentTime);
    };

    Euphony.prototype.on = function(eventName, callback) {
      return this["on" + eventName] = callback;
    };

    return Euphony;

  })();

  this.Euphony = Euphony;

}).call(this);
